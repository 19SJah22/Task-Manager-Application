package com.mycompany.fa2;
import com.mycompany.fa2.Add_A_Task;
import com.mycompany.fa2.TaskDataBase;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author sjanr
 */
public class TaskManager extends javax.swing.JFrame {
      private ArrayList<TaskDataBase> taskList;
    private Add_A_Task addTaskFrame;

private TableRowSorter<DefaultTableModel> rowSorter;
private java.sql.Connection connection;
    
public Add_A_Task getAddTaskFrame() {
    return addTaskFrame;
}

public void updateTaskTable() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    if (model == null) {
        model = new DefaultTableModel();
        jTable1.setModel(model);
        model.addColumn("Task Name");
        model.addColumn("Date Due");
        model.addColumn("Category");
        model.addColumn("Description");
        model.addColumn("Completion Status");
    }
    model.setRowCount(0); 

    for (TaskDataBase task : taskList) {
        model.addRow(new Object[]{task.getTaskName(), task.getDueDate(), task.getCategory(), task.getDescription(), task.isCompletionStatus()});
    }
}


    /**
     * Creates new form TaskOrganiser
     */
   public TaskManager() {
       
    initComponents();
    
    taskList = new ArrayList<>();
    addTaskFrame = new Add_A_Task(this, taskList); 
    
    try {
            String url = "jdbc:sqlite:C:\\Users\\sjanr\\Desktop\\Oracle\\sqlite-tools\\sqlite-tools\\task.db";
            connection = DriverManager.getConnection(url);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error establishing the database connection.");
        }
    
     // Initialize the rowSorter
     DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
     rowSorter = new TableRowSorter<>(model);
     jTable1.setRowSorter(rowSorter);
        
    Export_Button.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        Export_ButtonActionPerformed(evt);
    }
  });
}


private void saveTaskDataToFile(String txtFilePath) throws IOException {
    File fileToSave = new File("C:\\\\Users\\\\sjanr\\\\Documents\\\\CTU\\\\2023\\\\Semester 2\\\\Completed Formal Assessments\\\\JD522\\\\New Folder\\\\FA2\\\\src\\\\main\\\\java\\\\com\\\\mycompany\\\\fa2\\\\Tasks.txt");

    try (FileWriter writer = new FileWriter(fileToSave)) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rowCount = model.getRowCount();
        int columnCount = model.getColumnCount();

        for (int i = 0; i < rowCount; i++) { 
            for (int j = 0; j < columnCount; j++) {
                Object cellValue = model.getValueAt(i, j);

                if (cellValue != null) {
                    writer.write(cellValue.toString());
                } else {
                    writer.write("");
                }

                if (j < columnCount - 1) {
                    writer.write("\t");
                } else {
                    writer.write("\n");
                }
            }
        }

        JOptionPane.showMessageDialog(this, "Data has been saved to Tetx.txt." + "\n The path is: " + fileToSave.getAbsolutePath());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        AddTask_Button = new javax.swing.JButton();
        Save_Button = new javax.swing.JButton();
        Update_Button = new javax.swing.JButton();
        Delete_Button = new javax.swing.JButton();
        Export_Button = new javax.swing.JButton();
        Search_TextField = new javax.swing.JTextField();
        Search_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Task Manager");
        setBackground(java.awt.Color.black);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Task Manager Application");

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBackground(new java.awt.Color(255, 255, 255));
        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 153, 0), new java.awt.Color(102, 153, 0)));
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Task Name", "Due Date", "Category", "Description", "Completion Status"
            }
        ));
        jTable1.setGridColor(new java.awt.Color(0, 102, 102));
        jTable1.setSelectionBackground(java.awt.Color.black);
        jTable1.setSelectionForeground(java.awt.Color.cyan);
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);

        AddTask_Button.setBackground(new java.awt.Color(102, 153, 0));
        AddTask_Button.setForeground(java.awt.Color.white);
        AddTask_Button.setText("Add Task");
        AddTask_Button.setBorder(null);
        AddTask_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTask_ButtonActionPerformed(evt);
            }
        });

        Save_Button.setBackground(new java.awt.Color(102, 153, 0));
        Save_Button.setForeground(new java.awt.Color(255, 255, 255));
        Save_Button.setText("Save");
        Save_Button.setBorder(null);
        Save_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_ButtonActionPerformed(evt);
            }
        });

        Update_Button.setBackground(new java.awt.Color(102, 153, 0));
        Update_Button.setForeground(new java.awt.Color(255, 255, 255));
        Update_Button.setText("Update");
        Update_Button.setBorder(null);
        Update_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_ButtonActionPerformed(evt);
            }
        });

        Delete_Button.setBackground(new java.awt.Color(102, 153, 0));
        Delete_Button.setForeground(new java.awt.Color(255, 255, 255));
        Delete_Button.setText("Delete");
        Delete_Button.setBorder(null);
        Delete_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_ButtonActionPerformed(evt);
            }
        });

        Export_Button.setBackground(new java.awt.Color(102, 153, 0));
        Export_Button.setForeground(new java.awt.Color(255, 255, 255));
        Export_Button.setText("Export");
        Export_Button.setBorder(null);
        Export_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_ButtonActionPerformed(evt);
            }
        });

        Search_TextField.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        Search_TextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        Search_Button.setBackground(new java.awt.Color(0, 204, 204));
        Search_Button.setForeground(new java.awt.Color(0, 0, 0));
        Search_Button.setText("Search");
        Search_Button.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        Search_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(174, 174, 174))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Save_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(Update_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(Delete_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Search_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addComponent(Search_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(AddTask_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Export_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddTask_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Export_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Search_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Save_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Update_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Delete_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddTask_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTask_ButtonActionPerformed
     // TODO add your handling code here:
     Add_A_Task addTaskFrame = new Add_A_Task(this, taskList);
    addTaskFrame.setVisible(true);
    this.addTaskFrame = addTaskFrame; // Store a reference to the Add_A_Task frame
    this.dispose();
    }//GEN-LAST:event_AddTask_ButtonActionPerformed

    private void Update_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_ButtonActionPerformed
     // Check if the connection is null or not established
    if (connection == null) {
        // Handle the error, e.g., display an error message
        JOptionPane.showMessageDialog(this, "Database connection is not established.");
        return;
    }

    // Create a file chooser dialog to let the user choose the file to update from
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Choose a file to update from");
    int result = fileChooser.showOpenDialog(this);

    if (result == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        String filePath = selectedFile.getAbsolutePath();

        // Clear existing data in the database
        clearDatabaseData();

        try {
            // Check the file extension and choose the appropriate update method
            if (filePath.endsWith(".csv")) {
                updateFromCSVFile(filePath);
            } else if (filePath.endsWith(".txt")) {
                updateFromTXTFile(filePath);
            } else {
                JOptionPane.showMessageDialog(this, "Unsupported file format. Please select a .csv or .txt file.");
            }

            // Update the task table
            updateTaskTable();

            JOptionPane.showMessageDialog(this, "Data has been updated.");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error updating data: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_Update_ButtonActionPerformed

    private void updateFromCSVFile(String filePath) throws IOException {
    try (BufferedReader reader = Files.newBufferedReader(Paths.get(filePath))) {
        String line;
        while ((line = reader.readLine()) != null) {
            // Split the CSV line into individual values based on the delimiter (comma)
            String[] values = line.split(",");

            // Assuming the CSV file has the same order of columns as your database table
            String taskName = values[0].trim();
            String dueDate = values[1].trim();
            String category = values[2].trim();
            String description = values[3].trim();
            String completion = values[4].trim();

            // Insert the data into the database using your insertTaskIntoDatabase method
            TaskDataBase task = new TaskDataBase(taskName, dueDate, category, description, completion);
            insertTaskIntoDatabase(task);
        }
    }
}
    
    private void updateFromTXTFile(String filePath) throws IOException {
    try (BufferedReader reader = Files.newBufferedReader(Paths.get(filePath))) {
        String line;
        while ((line = reader.readLine()) != null) {
            // Assuming values are separated by tabs ('\t') in the TXT file
            String[] values = line.split("\t");

            // Assuming the TXT file has the same order of columns as your database table
            String taskName = values[0].trim();
            String dueDate = values[1].trim();
            String category = values[2].trim();
            String description = values[3].trim();
            String completion = values[4].trim();

            // Insert the data into the database using your insertTaskIntoDatabase method
            TaskDataBase task = new TaskDataBase(taskName, dueDate, category, description, completion);
            insertTaskIntoDatabase(task);
        }
    }
}

    private void saveDataToFile() throws IOException {
    File fileToSave = new File("C:/Users/sjanr/Documents/CTU/2023/Semester 2/Completed Formal Assessments/JD522/New Folder/FA2/src/main/java/com/mycompany/fa2/Tasks.txt");

    try (FileWriter writer = new FileWriter(fileToSave)) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rowCount = model.getRowCount();
        int columnCount = model.getColumnCount();

        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                Object cellValue = model.getValueAt(i, j);

                if (cellValue != null) {
                    writer.write(cellValue.toString());
                } else {
                    writer.write("");
                }

                if (j < columnCount - 1) {
                    writer.write("\t"); // Use tab as a delimiter
                } else {
                    writer.write("\n"); // Start a new line after each row
                }
            }
        }

        JOptionPane.showMessageDialog(this, "Data has been saved to Tasks.txt.\n The path is: " + fileToSave.getAbsolutePath());
    }
}

    private void exportToCSV() throws IOException {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    int rowCount = model.getRowCount();
    int columnCount = model.getColumnCount();
    String filePath = "C:/Users/sjanr/Documents/CTU/2023/Semester 2/Completed Formal Assessments/JD522/New Folder/FA2/src/main/java/com/mycompany/fa2/Tasks.csv";

    try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(filePath))) {
        for (int i = 0; i < columnCount; i++) {
            writer.write(model.getColumnName(i));
            if (i < columnCount - 1) {
                writer.write(",");
            } else {
                writer.write("\n");
            }
        }

        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                Object cellValue = model.getValueAt(i, j);
                if (cellValue != null) {
                    writer.write(cellValue.toString());
                }

                if (j < columnCount - 1) {
                    writer.write(",");
                } else {
                    writer.write("\n");
                }
            }
        }

        JOptionPane.showMessageDialog(this, "Data has been exported to " + filePath);
    } catch (IOException ex) {
        Logger.getLogger(TaskManager.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error exporting data: " + ex.getMessage());
    }
}

    private void clearDatabaseData() {
    try {
        String sql = "DELETE FROM Task";
        PreparedStatement preparedStatement = connection.prepareStatement(sql);
        preparedStatement.executeUpdate();
        preparedStatement.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
        // Handle the SQL exception, e.g., log the error or display an error message
    }
}

private void insertDataIntoDatabase() {
    for (TaskDataBase task : taskList) {
        insertTaskIntoDatabase(task);
    }
}

private void insertTaskIntoDatabase(TaskDataBase task) {
    PreparedStatement preparedStatement = null;

    try {
        // Check if the task already exists in the database based on its name
        String checkIfExistsSql = "SELECT * FROM Task WHERE taskName = ?";
        PreparedStatement checkIfExistsStatement = connection.prepareStatement(checkIfExistsSql);
        checkIfExistsStatement.setString(1, task.getTaskName());
        ResultSet resultSet = checkIfExistsStatement.executeQuery();

        if (resultSet.next()) {
            // Task exists, update it
            String updateSql = "UPDATE Task SET due = ?, Category = ?, description = ?, completion = ? WHERE taskName = ?";
            preparedStatement = connection.prepareStatement(updateSql);
            preparedStatement.setString(1, task.getDueDate());
            preparedStatement.setString(2, task.getCategory());
            preparedStatement.setString(3, task.getDescription());
            preparedStatement.setString(4, task.isCompletionStatus());
            preparedStatement.setString(5, task.getTaskName());
            preparedStatement.executeUpdate();
        } else {
            // Task does not exist, insert it
            String insertSql = "INSERT INTO Task (taskName, due, Category, description, completion) VALUES (?, ?, ?, ?, ?)";
            preparedStatement = connection.prepareStatement(insertSql);
            preparedStatement.setString(1, task.getTaskName());
            preparedStatement.setString(2, task.getDueDate());
            preparedStatement.setString(3, task.getCategory());
            preparedStatement.setString(4, task.getDescription());
            preparedStatement.setString(5, task.isCompletionStatus());
            preparedStatement.executeUpdate();
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle the SQL exception, e.g., log the error or display an error message
    } finally {
        try {
            if (preparedStatement != null) {
                preparedStatement.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the SQL exception, e.g., log the error or display an error message
        }
    }
}

private void readCSVFile(File file, DefaultTableModel model) throws IOException {
   
    BufferedReader reader = new BufferedReader(new FileReader(file));
    String line;
    while ((line = reader.readLine()) != null) {
    
    String[] columns = line.split(",");
    model.addRow(columns);
    }
    reader.close();
}

private void readTextFile(File file, DefaultTableModel model) throws IOException {
   
    BufferedReader reader = new BufferedReader(new FileReader(file));
    String line;
    while ((line = reader.readLine()) != null) {
  
    String[] columns = line.split("\t");
    model.addRow(columns);
    }
    reader.close();
}

    private void Export_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_ButtonActionPerformed
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    int rowCount = model.getRowCount();
    int columnCount = model.getColumnCount();
    
    // Use a relative file path for the CSV file
    String csvFilePath = "Tasks.csv";

    try {
        BufferedWriter writer = new BufferedWriter(new FileWriter(csvFilePath));

        // Rest of your code for exporting data to the CSV file

        writer.close();
        JOptionPane.showMessageDialog(this, "Data has been exported to " + csvFilePath);
    } catch (IOException ex) {
        Logger.getLogger(TaskManager.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error exporting data: " + ex.getMessage());
    }
    }//GEN-LAST:event_Export_ButtonActionPerformed

    private void Save_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_ButtonActionPerformed
    // Use a relative file path for the TXT file
    String txtFilePath = "Tasks.txt";

    try {
        // Use the txtFilePath when saving data to the TXT file
        saveTaskDataToFile(txtFilePath);
    } catch (IOException ex) {
        Logger.getLogger(TaskManager.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_Save_ButtonActionPerformed

    private void Delete_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_ButtonActionPerformed
      int selectedRow = jTable1.getSelectedRow();

    if (selectedRow != -1) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        // Get the unique identifier (e.g., task name or primary key) of the row to delete
        String taskNameToDelete = (String) model.getValueAt(selectedRow, 0); // Assuming task name is in the first column

        // Delete the row from the database
        if (deleteTaskFromDatabase(taskNameToDelete)) {
            // If deletion from the database was successful, also remove it from the JTable
            model.removeRow(selectedRow);
            JOptionPane.showMessageDialog(this, "Task deleted successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Error deleting task from the database.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.");
    }
    }//GEN-LAST:event_Delete_ButtonActionPerformed

    // Method to delete a task from the SQLite database
private boolean deleteTaskFromDatabase(String taskName) {
    String url = "jdbc:sqlite:C:\\Users\\sjanr\\Desktop\\Oracle\\sqlite-tools\\sqlite-tools\\task.db"; // Replace with your SQLite database URL
    String sql = "DELETE FROM task WHERE Task = ?"; // Replace with your table name

    try (Connection conn = DriverManager.getConnection(url);
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        // Set the parameter for the prepared statement
        pstmt.setString(1, taskName);

        // Execute the DELETE query
        pstmt.executeUpdate();
        return true; // Deletion was successful

    } catch (SQLException e) {
        e.printStackTrace();
        return false; // Deletion failed
    }
}
    private void Search_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_ButtonActionPerformed
       String searchText = Search_TextField.getText().trim();
        if (searchText.isEmpty()) {
            // If the search text is empty, reset the row filter
            rowSorter.setRowFilter(null);
        } else {
            // Use a RowFilter to filter rows that match the search text
            RowFilter<DefaultTableModel, Object> rf = RowFilter.regexFilter("(?i)" + searchText);
            rowSorter.setRowFilter(rf);
        }
    }//GEN-LAST:event_Search_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TaskManager taskOrganiser = new TaskManager();
                taskOrganiser.setVisible(true); 

               
                taskOrganiser.getAddTaskFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddTask_Button;
    private javax.swing.JButton Delete_Button;
    private javax.swing.JButton Export_Button;
    private javax.swing.JButton Save_Button;
    private javax.swing.JButton Search_Button;
    private javax.swing.JTextField Search_TextField;
    private javax.swing.JButton Update_Button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
